<#@ template language="C#" HostSpecific="True" #>
<#@ output extension=".cshtml" #>
<#@ include file="Imports.include.t4" #>
<#@ include file="ViewModel.include.t4" #>
<#
if(usesViewModel) {
	modelPropertyName = "." + ViewDataTypeShortName;
#>
@using <#= modelNamespace #>
@model <#= viewModelClassName #>
<#
} else { 
#>
@model <#= ViewDataTypeName #>
<#
}
#>
<#@ include file="Debug.include.t4" #>
<#
// "form-control" attribute is only supported for all EditorFor() in System.Web.Mvc 5.1.0.0 or later versions, except for checkbox, which uses a div in Bootstrap
string boolType = "System.Boolean";
Version requiredMvcVersion = new Version("5.1.0.0");
bool isControlHtmlAttributesSupported = MvcVersion >= requiredMvcVersion;
if(MvcVersion < (new Version("5.1.0.0")))
	throw new Exception("Minimum MVC version required is 5.1.0.0.");

// The following chained if-statement outputs the file header code and markup for a partial view, a view using a layout page, or a regular view.
if(IsPartialView) {
#>

<#
} else if(IsLayoutPageSelected) {
#>

@{
    ViewBag.Title = "<#= ViewName#> <#= ViewDataTypeShortName#>";
<#
if (!String.IsNullOrEmpty(LayoutPageFile)) {
#>
    Layout = "<#= LayoutPageFile#>";
<#
}
#>
}

<h2>@ViewBag.Title</h2>

<#
} else {
#>

@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title><#= ViewName #> <#= ViewDataTypeShortName#></title>
</head>
<body>
<#
    PushIndent("    ");
}
#>
<#
if (ReferenceScriptLibraries) {
#>
<#
    if (!IsLayoutPageSelected && IsBundleConfigPresent) {
#>
@Scripts.Render("~/bundles/jquery")
@Scripts.Render("~/bundles/jqueryval")

<#
    }
#>
<#
    else if (!IsLayoutPageSelected) {
#>
<script src="~/Scripts/jquery-<#= JQueryVersion #>.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>

<#
    }
#>
<#
}
#>
<div class="container">
	@using (Html.BeginForm()) 
	{
		@Html.AntiForgeryToken()
    
        <h4><#= ViewDataTypeShortName #></h4>
        <hr />
		@Html.ValidationSummary(true, "", new { @class = "text-danger" })

<#
foreach (PropertyMetadata property in ModelMetadata.Properties) {
    if (property.Scaffold && !property.IsAutoGenerated && !property.IsReadOnly && !property.IsAssociation) {

        // If the property is a primary key and Guid, then the Guid is generated in the controller. Hence, this propery is not displayed on the view.
        if (property.IsPrimaryKey && IsPropertyGuid(property)) {
            continue;
        }

#>
        <div class="row">
<#
		bool isCheckbox = property.TypeName.Equals(boolType);
		if (isCheckbox)
		{
#>
			<div class="form-group col-md-1">
<#
			PushIndent("    ");
		} else {
#>
			<div class="form-group col-md-5">
<#
		}
#>
<#
        if (property.IsForeignKey) {
#>
				@Html.LabelFor(model => model<#= modelPropertyName #>.<#= property.PropertyName #>, htmlAttributes: new { @class = "control-label" })
<#
        } else {
#>
				@Html.LabelFor(model => model<#= modelPropertyName #>.<#= property.PropertyName #>, htmlAttributes: new { @class = "control-label" })
<#
        }
		if (isCheckbox)
		{
			PopIndent();
#>
			</div>
<#
		}
#>
<#
        if (property.IsForeignKey) {
#>
				@Html.DropDownListFor(model => model<#= modelPropertyName #>.<#= property.PropertyName #>, new SelectList(Model.<#= relatedProperties[property.PropertyName].EntitySetName #>, "<#= property.PropertyName #>", "Name"), htmlAttributes: new { @class = "form-control" })
<#
        } else if (isCheckbox) {
#>
            <div class="form-group col-md-1">
<#
                PushIndent("    ");
#>
                @Html.EditorFor(model => model<#= modelPropertyName #>.<#= property.PropertyName #>)
<#
        } else if (property.IsEnum && !property.IsEnumFlags) {
#>
                @Html.EnumDropDownListFor(model => model<#= modelPropertyName #>.<#= property.PropertyName #>, htmlAttributes: new { @class = "form-control" })
<#
        } else {
#>
                @Html.EditorFor(model => model<#= modelPropertyName #>.<#= property.PropertyName #>, new { htmlAttributes = new { @class = "form-control" } })
<#
        }
#>
				@Html.ValidationMessageFor(model => model<#= modelPropertyName #>.<#= property.PropertyName #>, "", new { @class = "text-danger" })
<#
        if (isCheckbox) {
            PopIndent();
        }
#>
            </div>
        </div>

<#
    }
}
#>
        <div class="row">
            <div class="form-group col-md-5">
                <input type="submit" value="Create" class="btn btn-primary" />
                @Html.ActionLink("Cancel", "Index", null, new { @class = "btn btn-default" })
            </div>
        </div>
	}
</div>

<#
if(IsLayoutPageSelected && ReferenceScriptLibraries && IsBundleConfigPresent) {
#>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
<#
}
#>
<#
else if(IsLayoutPageSelected && ReferenceScriptLibraries) {
#>

<script src="~/Scripts/jquery-<#= JQueryVersion #>.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
<#
}
#>
<#
// The following code closes the tag used in the case of a view using a layout page and the body and html tags in the case of a regular view page
#>
<#
if(!IsPartialView && !IsLayoutPageSelected) {
    ClearIndent();
#>
</body>
</html>
<#
}
#>
<#@ include file="ModelMetadataFunctions.cs.include.t4" #>